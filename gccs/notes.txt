    Run NamingServer:
        ns -Djacorb.naming.ior_filename=/path/to/NS_Ref

    Run Server:
        jaco demo.benchmark.Server

    Run Client:
        jaco demo.bemnchmark.Client
Note:
    Make sure that jacorb.properties is in place(in the current dir) and has 
    the name server reference such as -
    ORBInitRef.NameService=file:/path/to/NS_Ref

Remember to set ORBInitRef.NameService in jacorb.properties of Jacorb to the value found in MilifeSDK/etc/jacorb.properties,
by doing that, the Name manager can connect to name service of the SDK
e.g. ORBInitRef.NameService=corbaloc::localhost:2050/StandardNS/NameServer%2DPOA/_root


LOGGING
for each class, one should include the logging capabilities to it by following steps:
1. import logger:
	import org.apache.log4j.Logger;
2. declare logger member variable:
class Example {
....
	/**
	 * m_logger for the system
	 */
	static Logger m_logger;

	static {
		m_logger = Logger.getLogger(Example.class);
	}
	...
}
3. When want to log information about the progress of running program
	if (m_logger.isInfoEnabled()) {
		m_logger.info("<<<<<Logging information here>>>>>>");
	}
4. When want to log debug information for debugging purpose
	if (m_logger.isDebugEnabled()) {
		m_logger.debug("<<<<<Logging information here>>>>>>");
	}
5. For error reporting, we should always log the error message for debugging purpose
	m_logger.error("<<<<Detail about error message here>>>>");
	
SIMULATION WITH NUMBER TRANSLATION
In order to make demonstration about number translation with MiLife, we have to perform
the following steps:
1. Copy file aCallb.xml to folder %ISG_SDK%\etc\script\, where %ISG_SDK% is the installed
directory of Milife SDK
2. Start Milife SDK simulation tools, load script aCallb.xml
3. Select program "add subscribers", run it (in Milife SDK)
4. Start the monitor application (MyAppInit)
5. In simulation tools, select program "making call", to make calls
	you will see aPerson calling bPerson from the first step, but
	if the number translation was started, the call will be routed to pizzaRestaurant

TROUBLESHOOTING
1. When Application Framework can not initialized, one problem is the definition of the
classpath, e.g with the following error description
<<<Caused by: java.lang.NoClassDefFoundError: org/apache/avalon/framework/configuration/Configurable>>>
The classpath should include:
%JACORB_HOME%\lib\avalon-framework-4.1.5.jar;
%JACORB_HOME%\lib\jacorb.jar;
%JACORB_HOME%\lib\logkit-1.2.jar;
%GROUP_HOME%\lib\parlay_interfaces-5.0.jar;
%GROUP_HOME%\lib\log4j-1.2.9.jar;
%GROUP_HOME%\bin\.


ACCOUNT TO I4 SERVER
Server: weed.informatik.rwth-aachen.de

Connect to the server via SSH
ssh -p 4711 disgroup5@weed.informatik.rwth-aachen.de
password: TEST@123
change password after firts login

Connect to the MySQL
mysql -u group5 -p
> use group5
//dev.mysql.com/

CALL EVENTS DISPATCHING
When a call related event appears on the network. The IpCallControlManager should be the first one to be notified
about that event. IpCallControlManager will dispatch the event to appropriated IpAppCallControlManager via CallEventNotify.
IpAppCallControlManager, in turn, handle the event, make some modifications (if needed) then send the result back
to IpCallControlManager. Then, IpCallControlManager forward the result to the gateway.
For example: When user dial a number, the gateway will notify IpCallControlManager about the event: routeReq.
IpCallControlManager forward that event to IpApp.. , IpApp.. make modification of the destination routing number, then
send back to IpCall..., the IpCallControlManager forward it to gateway. Gateway receives the final result, make appropriated
routing to the right destination (not the original one) - that is how Number Translation was done.
- First, the event should only be forwarded to IpCallControlManager
- When the gateway receives the final result, (still the routeReq with modification of the destination address). It will
dispatch the events to appropriated listeners (but not the IpCallControlManager)